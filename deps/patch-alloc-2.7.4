--- ./src/headers/pariinl.h	2015-01-11 23:08:33.000000000 +0100
+++ ../pari-2.7.4-patch/./src/headers/pariinl.h	2016-02-26 13:47:16.000000000 +0100
@@ -968,13 +968,39 @@
   }                                  \
 }
 
+extern void  *(*__pari_allocate_func) (size_t);
+extern void  *(*__pari_callocate_func) (size_t, size_t);
+extern void  *(*__pari_reallocate_func) (void *, size_t);
+extern void  (*__pari_free_func) (void *);
+
+INLINE void _free(void *pointer)
+{
+  free(pointer);
+}
+
+INLINE void *_malloc(size_t sz)
+{
+  return malloc(sz);
+}
+
+INLINE void *_calloc(size_t n, size_t s)
+{
+  return calloc(n, s);
+}
+
+INLINE void *_realloc(void * old, size_t s)
+{
+  return realloc(old, s);
+}
+
 INLINE void
 pari_free(void *pointer)
 {
   BLOCK_SIGINT_START;
-  free(pointer);
+  (*__pari_free_func)(pointer);
   BLOCK_SIGINT_END;
 }
+
 INLINE void*
 pari_malloc(size_t size)
 {
@@ -982,7 +1008,7 @@
   {
     char *tmp;
     BLOCK_SIGINT_START;
-    tmp = (char*)malloc(size);
+    tmp = (char*)(*__pari_allocate_func)(size);
     BLOCK_SIGINT_END;
     if (!tmp) pari_err(e_MEM);
     return tmp;
@@ -990,24 +1016,28 @@
   if (DEBUGMEM) pari_warn(warner,"mallocing NULL object");
   return NULL;
 }
+
 INLINE void*
 pari_realloc(void *pointer, size_t size)
 {
   char *tmp;
 
   BLOCK_SIGINT_START;
-  if (!pointer) tmp = (char *) malloc(size);
-  else tmp = (char *) realloc(pointer,size);
+  if (!pointer) tmp = (char *) (*__pari_allocate_func)(size);
+  else tmp = (char *) (*__pari_reallocate_func)(pointer,size);
   BLOCK_SIGINT_END;
   if (!tmp) pari_err(e_MEM);
   return tmp;
 }
+
 INLINE void*
 pari_calloc(size_t size)
 {
-  void *t = pari_malloc(size);
-  memset(t, 0, size); return t;
+  void *t = (*__pari_callocate_func)(1, size);
+  memset(t, 0, size);
+  return t;
 }
+
 INLINE GEN
 cgetalloc(long t, size_t l)
 {
--- ./src/headers/paridecl.h	2015-05-27 17:40:13.000000000 +0200
+++ ../pari-2.7.4-patch/./src/headers/paridecl.h	2016-02-26 12:50:36.000000000 +0100
@@ -4012,7 +4012,15 @@
 INLINE void   pari_free(void *pointer);
 INLINE void*  pari_calloc(size_t size);
 INLINE void*  pari_malloc(size_t bytes);
+INLINE void*  _realloc(void *pointer,size_t size);
+INLINE void   _free(void *pointer);
+INLINE void*  _calloc(size_t num, size_t size);
+INLINE void*  _malloc(size_t bytes);
 INLINE void*  pari_realloc(void *pointer,size_t size);
+extern void  *(*__pari_allocate_func) (size_t);
+extern void  *(*__pari_callocate_func) (size_t, size_t);
+extern void  *(*__pari_reallocate_func) (void *, size_t);
+extern void  (*__pari_free_func) (void *);
 INLINE GEN    perm_conj(GEN s, GEN t);
 INLINE GEN    perm_inv(GEN x);
 INLINE GEN    perm_mul(GEN s, GEN t);
--- ./src/language/init.c	2015-06-02 16:03:57.000000000 +0200
+++ ../pari-2.7.4-patch/./src/language/init.c	2016-02-26 13:55:04.000000000 +0100
@@ -32,6 +32,22 @@
 const double LOG2_10 = 3.321928094887362;  /* log_2(10) */
 
 GEN gnil, gen_0, gen_1, gen_m1, gen_2, gen_m2, ghalf, err_e_STACK;
+void  *(*__pari_allocate_func) (size_t) = _malloc;
+void  *(*__pari_callocate_func) (size_t, size_t) = _calloc;
+void  *(*__pari_reallocate_func) (void *, size_t) = _realloc;
+void  (*__pari_free_func) (void *) = _free;
+
+void pari_set_memory_functions(void *(*alloc_func) (size_t),
+                             void *(*calloc_func) (size_t, size_t),
+                             void *(*realloc_func) (void *, size_t),
+                             void (*free_func) (void *))
+{  
+  __pari_allocate_func = alloc_func;
+  __pari_callocate_func = calloc_func;
+  __pari_reallocate_func = realloc_func;
+  __pari_free_func = free_func;
+}
+
 
 static const ulong readonly_constants[] = {
   evaltyp(t_INT) | _evallg(2),  /* gen_0 */
@@ -176,7 +192,7 @@
   if (bl_prev(x)) bl_next(bl_prev(x)) = bl_next(x);
   if (DEBUGMEM > 2)
     err_printf("killing block (no %ld): %08lx\n", bl_num(x), x);
-  free((void*)bl_base(x)); /* pari_free not needed: we already block */
+  pari_free((void*)bl_base(x)); /* pari_free not needed: we already block */
   BLOCK_SIGINT_END;
 #ifdef DEBUG
   err_printf("- %ld\n", NUM--);
@@ -786,32 +802,32 @@
     entree *ep = functions_hash[i];
     while (ep) {
       entree *EP = ep->next;
-      if (!EpSTATIC(ep)) { freeep(ep); free(ep); }
+      if (!EpSTATIC(ep)) { freeep(ep); pari_free(ep); }
       ep = EP;
     }
   }
-  free((void*)varentries);
-  free((void*)primetab);
+  pari_free((void*)varentries);
+  pari_free((void*)primetab);
   pari_close_seadata();
   pari_thread_close();
   pari_kernel_close();
 
-  free((void*)functions_hash);
-  free((void*)defaults_hash);
+  pari_free((void*)functions_hash);
+  pari_free((void*)defaults_hash);
   free((void*)bot);
-  if (diffptr) free((void*)diffptr);
-  free(current_logfile);
-  free(current_psfile);
+  if (diffptr) pari_free((void*)diffptr);
+  pari_free(current_logfile);
+  pari_free(current_psfile);
   pari_stack_delete(&s_MODULES);
   pari_stack_delete(&s_OLDMODULES);
   pari_close_homedir();
-  if (pari_datadir) free(pari_datadir);
+  if (pari_datadir) pari_free(pari_datadir);
   if (init_opts&INIT_DFTm)
   { /* delete GP_DATA */
-    if (GP_DATA->hist->v) free((void*)GP_DATA->hist->v);
-    if (GP_DATA->pp->cmd) free((void*)GP_DATA->pp->cmd);
+    if (GP_DATA->hist->v) pari_free((void*)GP_DATA->hist->v);
+    if (GP_DATA->pp->cmd) pari_free((void*)GP_DATA->pp->cmd);
     delete_dirs(GP_DATA->path);
-    free((void*)GP_DATA->path->PATH);
+    pari_free((void*)GP_DATA->path->PATH);
   }
   BLOCK_SIGINT_END;
 }
